from pysb import *
from pysb.simulator import ScipyOdeSimulator
from pysb.simulator import BngSimulator
import numpy as np
import matplotlib.pyplot as plt
import sys

Model()

q = 2.0
Monomer('X0')
Monomer('X1', ['delay'], {'delay': ['_0', '_10']})
Monomer('X2', ['delay'], {'delay': ['_0', '_20']})
Monomer('X3', ['delay'], {'delay': ['_0', '_70']})

Parameter('X0_0', 300)
Parameter('X1_delay_0', 10*q)
Parameter('X2_delay_0', 20*q)
Parameter('X3_delay_0', 70*q)
Parameter('X1_0', 300-10*q)
Parameter('X2_0', 300-20*q)
Parameter('X3_0', 300-70*q)

Initial(X0(), X0_0)
Initial(X1(delay = "_0"), X1_delay_0)
Initial(X2(delay = "_0"), X2_delay_0)
Initial(X3(delay = "_0"), X3_delay_0)
Initial(X1(delay = "_10"), X1_0)
Initial(X2(delay = "_20"), X2_0)
Initial(X3(delay = "_70"), X3_0)

#What happens if I change k_synth to 2.0
constant = 7.0
Observable('X0_obs', X0())
Observable('X1_obs', X1(delay = '_10'))
Expression('new_rate_1', (400-X0_0)*2e-42)
Expression('new_rate_2', X0_obs*0.2e-43)
print('check')
print(X0_obs)



# Parameter('k_synth', 2)
Expression('k_synth', (1000-X0_obs)*1.5e-3)
Expression('k_consume', (324-X0_obs)*1.5e-4)
Expression('k_synth_z', (1000-X0_obs)*1.5e-2)
Expression('k_consume_z', (324-X0_obs)*1.5e-3)

Parameter('k_convert_1', 1.0/(1*10.0))
Parameter('k_convert_2', 1.0/(1*20.0))
Parameter('k_convert_3', 1.0/(1*70.0))

Rule('X0_synth', None >> X0(), k_synth)
Rule('X1_synth', None >> X1(delay = '_0'), k_synth)
Rule('X2_synth', None >> X2(delay = '_0'), k_synth)
Rule('X3_synth', None >> X3(delay = '_0'), k_synth)

Rule('X0_consume', X0() >> None, k_consume)
Rule('X1_consume', X1(delay = '_0') >> None, k_consume)
Rule('X2_consume', X2(delay = '_0') >> None, k_consume)
Rule('X3_consume', X3(delay = '_0') >> None, k_consume)

# Rule('X1_delay', X1(delay = '_0') >> X1(delay = '_10'), k_convert_1)
# Rule('X2_delay', X2(delay = '_0') >> X2(delay = '_20'), k_convert_2)
# Rule('X3_delay', X3(delay = '_0') >> X3(delay = '_70'), k_convert_3)



# Observable('X0_obs', X0())
#Observable('X1_obs', X1(delay = '_10'))
Observable('X2_obs', X2(delay = '_20'))
Observable('X3_obs', X3(delay = '_70'))

Observable('X1_delay_obs', X1(delay = '_0'))
Observable('X2_delay_obs', X2(delay = '_0'))
Observable('X3_delay_obs', X3(delay = '_0'))

Sim = ScipyOdeSimulator(model, verbose=0)
#Sim = BngSimulator(model, verbose = True)

tspan = np.arange(0, 501, 1)

x= Sim.run(tspan).observables

print(len(x))
print('Should match:')
print(x['X0_obs'][230])
print(x['X1_obs'][240])
print(x['X2_obs'][250])
print(x['X3_obs'][300])

print()
print(x['X0_obs'][-1])
print(x['X1_obs'][-1])
print(x['X2_obs'][-1])
print(x['X3_obs'][-1])

print('Delays')
print(x['X1_delay_obs'][-1])
print(x['X2_delay_obs'][-1])
print(x['X3_delay_obs'][-1])
print()
print(x['X1_obs'][-1], x['X0_obs'][500-10])
print(x['X2_obs'][-1], x['X0_obs'][500-20])
print(x['X3_obs'][-1], x['X0_obs'][500-70])

for obs in model.observables:
    plt.plot(tspan, x[obs.name], label = obs.name, lw = 2)

plt.legend(loc=0)

plt.show()








